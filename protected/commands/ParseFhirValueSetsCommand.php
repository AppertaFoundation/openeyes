<?php
/**
 * (C) OpenEyes Foundation, 2014
 * This file is part of OpenEyes.
 * OpenEyes is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 * OpenEyes is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License along with OpenEyes in a file titled COPYING. If not, see <http://www.gnu.org/licenses/>.
 *
 * @link http://www.openeyes.org.uk
 *
 * @author OpenEyes <info@openeyes.org.uk>
 * @copyright Copyright (C) 2014, OpenEyes Foundation
 * @license http://www.gnu.org/licenses/agpl-3.0.html The GNU Affero General Public License V3.0
 */

/**
 * Parse FHIR value sets and generate corresponding PHP constants.
 */
class ParseFhirValueSetsCommand extends CConsoleCommand
{
    public function getOptionHelp()
    {
        return array('<valueset definition path>');
    }

    public function run($args)
    {
        if (count($args) != 1) {
            $this->usageError('Please supply the path to valuesets.json');
        }

        $data = json_decode(file_get_contents($args[0]));

        $value_sets = array();

        foreach ($data->feed->entry as $entry) {
            $content = $entry->content;
            if (@$content->experimental ||
                $content->status == 'retired' ||
                !isset($content->define) ||
                !preg_match('|^http://hl7.org/fhir|', $content->define->system)) {
                continue;
            }

            $name = $this->toConstantName($content->name);

            $value_sets[$name] = array(
                'system' => $content->define->system,
                'desc' => $this->normaliseDesc($content->description),
                'values' => $this->parseConcepts($name, $content->define->concept),
            );
        }

        $f = fopen(Yii::app()->basePath.'/helpers/FhirValueSet.php', 'w');

        fprintf($f, "<?php\n\n// Auto-generated by %s\n\nclass FhirValueSet\n{\n", __CLASS__);

        foreach ($value_sets as $value_set) {
            fprintf($f, "\t// %s\n\t// %s\n\n", $value_set['system'], $value_set['desc']);
            foreach ($value_set['values'] as $name => $value) {
                fprintf($f, "\tconst %s = '%s';", $name, $value['value']);
                if ($value['desc']) {
                    fprintf($f, '  // %s', $value['desc']);
                }
                fprintf($f, "\n");
            }
            fprintf($f, "\n\n");
        }

        fprintf($f, "}\n");

        fclose($f);
    }

    public function parseConcepts($base_name, array $concepts)
    {
        $values = array();
        foreach ($concepts as $concept) {
            $name = "{$base_name}_".$this->toConstantName($concept->code);

            $values[$name] = array(
                'value' => $concept->code,
                'desc' => $this->normaliseDesc(@$concept->definition) ?: $this->normaliseDesc(@$concept->display),
            );

            if (isset($concept->concept)) {
                $values += $this->parseConcepts($name, $concept->concept);
            }
        }

        return $values;
    }

    public function toConstantName($name)
    {
        return str_replace(
            array(' ', '-', '/', '.', '<',  '=',  '>'),
            array('_', '_', '_', '_', 'LT', 'EQ', 'GT'),
            strtoupper($name)
        );
    }

    public function normaliseDesc($desc)
    {
        return preg_replace("/[\n\r]+/", '  ', $desc);
    }
}
