<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-06-10 at 11:10:17.
 */
class MedicationTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Medication
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Medication();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }


    public function testRemoveAdherenceOnDelete()
    {
        $patient = $this->getMockBuilder('Patient')
            ->disableOriginalConstructor()
            ->setMethods(array('patientMedications'))
            ->getMock();

        $patient->expects($this->any())
            ->method('patientMedications')
            ->will($this->returnValue(array()));

        $adherence = $this->getMockBuilder('MedicationAdherence')
                ->disableOriginalConstructor()
                ->setMethods(array('delete'))
                ->getMock();

        $adherence->expects($this->once())
            ->method('delete')
            ->will($this->returnValue(true));

        $patient->adherence = $adherence;

        $medication = $this->getMockBuilder('Medication')
                ->disableOriginalConstructor()
                ->setMethods(array('getIsNewRecord', 'deleteByPk'))
                ->getMock();

        $medication->expects($this->once())
            ->method('getIsNewRecord')
            ->will($this->returnValue(false));

        $medication->patient = $patient;

        $medication->delete();
    }

    public function testRemoveAdherenceOnSave()
    {
        $patient = $this->getMockBuilder('Patient')
            ->disableOriginalConstructor()
            ->setMethods(array('patientMedications'))
            ->getMock();

        $patient->expects($this->any())
            ->method('patientMedications')
            ->will($this->returnValue(array()));

        $adherence = $this->getMockBuilder('MedicationAdherence')
                ->disableOriginalConstructor()
                ->setMethods(array('delete'))
                ->getMock();

        $adherence->expects($this->once())
                ->method('delete')
                ->will($this->returnValue(true));

        $patient->adherence = $adherence;

        $medication = $this->getMockBuilder('Medication')
                ->disableOriginalConstructor()
                ->setMethods(array('getIsNewRecord', 'updateByPk'))
                ->getMock();

        $medication->end_date = '2014-07-01';

        $medication->expects($this->any())
                ->method('getIsNewRecord')
                ->will($this->returnValue(false));

        $medication->patient = $patient;

        $medication->save(false);
    }

    public function testDoNotRemoveAdherenceOnSave()
    {
        $patient = $this->getMockBuilder('Patient')
            ->disableOriginalConstructor()
            ->setMethods(array('patientMedications'))
            ->getMock();

        $patient->expects($this->any())
            ->method('patientMedications')
            ->will($this->returnValue(array(new Medication())));

        $adherence = $this->getMockBuilder('MedicationAdherence')
                ->disableOriginalConstructor()
                ->setMethods(array('delete'))
                ->getMock();

        $adherence->expects($this->never())
                ->method('delete')
                ->will($this->returnValue(true));

        $patient->adherence = $adherence;

        $medication = $this->getMockBuilder('Medication')
                ->disableOriginalConstructor()
                ->setMethods(array('getIsNewRecord', 'updateByPk'))
                ->getMock();

        $medication->end_date = '2014-07-01';

        $medication->expects($this->any())
                ->method('getIsNewRecord')
                ->will($this->returnValue(false));

        $medication->patient = $patient;

        $medication->save(false);
    }
}
