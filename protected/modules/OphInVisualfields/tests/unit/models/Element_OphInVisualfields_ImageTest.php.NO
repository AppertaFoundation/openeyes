<?php
/**
 * (C) OpenEyes Foundation, 2014
 * This file is part of OpenEyes.
 * OpenEyes is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 * OpenEyes is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License along with OpenEyes in a file titled COPYING. If not, see <http://www.gnu.org/licenses/>.
 *
 * @package OpenEyes
 * @link http://www.openeyes.org.uk
 * @author OpenEyes <info@openeyes.org.uk>
 * @copyright Copyright (C) 2014, OpenEyes Foundation
 * @license http://www.gnu.org/licenses/agpl-3.0.html The GNU Affero General Public License V3.0
 */

class Element_OphInVisualfields_ImageTest extends CDbTestCase
{
	protected $fixtures = array(
		'patient' => 'Patient',
		'event' => 'Event',
		'file' => 'ProtectedFile',
	);

	public function setUp()
	{
		parent::setUp();
		Yii::app()->db->createCommand('delete from measurement_reference')->execute();
	}

	public function testUpdateMeasurementReference_NewRecord_Left()
	{
		$ml = $this->createFieldMeasurement(Eye::LEFT);
		$el = $this->createElement($this->event['event1']['id'], $ml->id, null);

		$this->assertMeasurementReferences(
			array(
				array('patient_measurement_id' => $ml->getPatientMeasurement()->id, 'event_id' => $this->event['event1']['id']),
			)
		);
	}

	public function testUpdateMeasurementReference_NewRecord_Right()
	{
		$mr = $this->createFieldMeasurement(Eye::RIGHT);
		$el = $this->createElement($this->event['event1']['id'], null, $mr->id);

		$this->assertMeasurementReferences(
			array(
				array('patient_measurement_id' => $mr->getPatientMeasurement()->id, 'event_id' => $this->event['event1']['id']),
			)
		);
	}

	public function testUpdateMeasurementReference_NewRecord_Both()
	{
		$ml = $this->createFieldMeasurement(Eye::LEFT);
		$mr = $this->createFieldMeasurement(Eye::RIGHT);
		$el = $this->createElement($this->event['event1']['id'], $ml->id, $mr->id);

		$this->assertMeasurementReferences(
			array(
				array('patient_measurement_id' => $ml->getPatientMeasurement()->id, 'event_id' => $this->event['event1']['id']),
				array('patient_measurement_id' => $mr->getPatientMeasurement()->id, 'event_id' => $this->event['event1']['id']),
			)
		);
	}

	public function testUpdateMeasurementReference_ExistingRecord_AddLeft()
	{
		$mr = $this->createFieldMeasurement(Eye::RIGHT);
		$el = $this->createElement($this->event['event1']['id'], null, $mr->id);

		$ml = $this->createFieldMeasurement(Eye::LEFT);
		$el->left_field_id = $ml->id;
		$el->save();

		$this->assertMeasurementReferences(
			array(
				array('patient_measurement_id' => $mr->getPatientMeasurement()->id, 'event_id' => $this->event['event1']['id']),
				array('patient_measurement_id' => $ml->getPatientMeasurement()->id, 'event_id' => $this->event['event1']['id']),
			)
		);
	}

	public function testUpdateMeasurementReference_ExistingRecord_AddRight()
	{
		$ml = $this->createFieldMeasurement(Eye::LEFT);
		$el = $this->createElement($this->event['event1']['id'], $ml->id, null);

		$mr = $this->createFieldMeasurement(Eye::RIGHT);
		$el->right_field_id = $mr->id;
		$el->save();

		$this->assertMeasurementReferences(
			array(
				array('patient_measurement_id' => $ml->getPatientMeasurement()->id, 'event_id' => $this->event['event1']['id']),
				array('patient_measurement_id' => $mr->getPatientMeasurement()->id, 'event_id' => $this->event['event1']['id']),
			)
		);
	}

	public function testUpdateMeasurementReference_ExistingRecord_ChangeLeft()
	{
		$ml1 = $this->createFieldMeasurement(Eye::LEFT);
		$el = $this->createElement($this->event['event1']['id'], $ml1->id, null);

		$ml2 = $this->createFieldMeasurement(Eye::LEFT);
		$el->left_field_id = $ml2->id;
		$el->save();

		$this->assertMeasurementReferences(
			array(
				array('patient_measurement_id' => $ml2->getPatientMeasurement()->id, 'event_id' => $this->event['event1']['id']),
			)
		);
	}

	public function testUpdateMeasurementReference_ExistingRecord_ChangeRight()
	{
		$mr1 = $this->createFieldMeasurement(Eye::RIGHT);
		$el = $this->createElement($this->event['event1']['id'], null, $mr1->id);

		$mr2 = $this->createFieldMeasurement(Eye::RIGHT);
		$el->right_field_id = $mr2->id;
		$el->save();

		$this->assertMeasurementReferences(
			array(
				array('patient_measurement_id' => $mr2->getPatientMeasurement()->id, 'event_id' => $this->event['event1']['id']),
			)
		);
	}

	public function testUpdateMeasurementReference_ExistingRecord_ChangeBoth()
	{
		$ml1 = $this->createFieldMeasurement(Eye::LEFT);
		$mr1 = $this->createFieldMeasurement(Eye::RIGHT);
		$el = $this->createElement($this->event['event1']['id'], $ml1->id, $mr1->id);

		$ml2 = $this->createFieldMeasurement(Eye::LEFT);
		$mr2 = $this->createFieldMeasurement(Eye::RIGHT);
		$el->left_field_id = $ml2->id;
		$el->right_field_id = $mr2->id;
		$el->save();

		$this->assertMeasurementReferences(
			array(
				array('patient_measurement_id' => $ml2->getPatientMeasurement()->id, 'event_id' => $this->event['event1']['id']),
				array('patient_measurement_id' => $mr2->getPatientMeasurement()->id, 'event_id' => $this->event['event1']['id']),
			)
		);
	}

	public function testUpdateMeasurementReference_ExistingRecord_RemoveLeft()
	{
		$ml = $this->createFieldMeasurement(Eye::LEFT);
		$mr = $this->createFieldMeasurement(Eye::RIGHT);
		$el = $this->createElement($this->event['event1']['id'], $ml->id, $mr->id);

		$el->left_field_id = null;
		$el->save();

		$this->assertMeasurementReferences(
			array(
				array('patient_measurement_id' => $mr->getPatientMeasurement()->id, 'event_id' => $this->event['event1']['id']),
			)
		);
	}

	public function testUpdateMeasurementReference_ExistingRecord_RemoveRight()
	{
		$ml = $this->createFieldMeasurement(Eye::LEFT);
		$mr = $this->createFieldMeasurement(Eye::RIGHT);
		$el = $this->createElement($this->event['event1']['id'], $ml->id, $mr->id);

		$el->right_field_id = null;
		$el->save();

		$this->assertMeasurementReferences(
			array(
				array('patient_measurement_id' => $ml->getPatientMeasurement()->id, 'event_id' => $this->event['event1']['id']),
			)
		);
	}

	private function createFieldMeasurement($eye_id)
	{
		$m = new OphInVisualfields_Field_Measurement;
		$m->patient_id = $this->patient['patient1']['id'];
		$m->eye_id = $eye_id;
		$m->image_id = $this->file['0']['id'];
		$m->strategy_id = 1;
		$m->pattern_id = 1;
		$m->cropped_image_id = $this->file['0']['id'];
		if (!$m->save()) {
			throw new Exception("Failed to save field measurement: " . implode(', ', $m->getErrors()));
		}
		return $m;
	}

	private function createElement($event_id, $left_field_id, $right_field_id)
	{
		$el = new Element_OphInVisualfields_Image;
		$el->event_id = $event_id;
		$el->left_field_id = $left_field_id;
		$el->right_field_id = $right_field_id;
		if (!$el->save()) {
			throw new Exception("Failed to save element: " . implode(', ', $el->getErrors()));
		}
		return $el;
	}

	private function assertMeasurementReferences(array $expected)
	{
		$this->assertEquals(
			$expected,
			Yii::app()->db->createCommand('select patient_measurement_id, event_id from measurement_reference order by id')->queryAll()
		);
	}
}
